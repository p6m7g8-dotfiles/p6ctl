# shellcheck shell=bash

######################################################################
#<
#
# Function: p6_usage(..., flag_debug, cmd, ...)
#
#  Args:
#	... -
#	flag_debug -
#	cmd -
#	... -
#
#  Depends:	 p6_cmd p6_msg p6_usage
#  Environment:	 EOF LC_ALL OPTIND
#>
#/ Synopsis
#/    bin/p6ctl [-D|-d] [cmd]
#/
######################################################################
p6_usage() {
  local rc="${1:-0}"
  local msg="${2:-}"

  if [ -n "$msg" ]; then
    p6_msg "$msg"
  fi
  cat <<EOF
Usage: bin/p6ctl [-D|-d] [cmd]

Options:
  -D    debeug off
  -d	debug on

Cmds:
  help
  install
  build
  docker_build
  docker_test
  release
EOF

  exit "$rc"
}

######################################################################
#<
#
# Function: p6main()
#
#>
#/ Synopsis
#/    The entry point for bin/p6ctl
#/
######################################################################
p6main() {
  shift 0

  # sanitize env
  LC_ALL=C

  # default options
  local flag_debug=0

  # parse options
  local flag
  while getopts "dD" flag; do
    case $flag in
    D) flag_debug=0 ;;
    d) flag_debug=1 ;;
    *) p6_usage 1 "invalid flag" ;;
    esac
  done
  shift $((OPTIND - 1))

  # grab command
  local cmd="$1"
  shift 1

  # security 101: only allow valid comamnds
  case $cmd in
  help) p6_usage ;;
  install) ;;
  docker_build) ;;
  docker_test) ;;
  build) ;;
  release) ;;
  *) p6_usage 1 "invalid cmd" ;;
  esac

  # setup -x based on flag_debug
  [ ${flag_debug} = 1 ] && set -x

  # exit if any cli errors w/ >0 return code
  # the commands can still disable locally if needed
  set -e
  p6_msg "$cmd"
  p6_cmd_"${cmd}" "$@"
  p6_msg_success "$cmd"
  set +e

  # stop debugging if it was enabled
  [ ${flag_debug} = 1 ] && set +x

  return 0
}

######################################################################
#<
#
# Function: p6_cmd_install(home=pgollucci/home)
#
#  Args:
# OPTIONAL home - [pgollucci/home]
#
#  Depends:	 p6_cmd p6_diagnostics
#>
######################################################################
p6_cmd_install() {
  local home="${1:-pgollucci/home}"

  local root
  local gh_dir
  gh_dir="$HOME/src/github.com/p6"
  root="$gh_dir"

  # Hier
  mkdir -p "$root"

  # Clone
  local p6_org
  p6_org="p6m7g8-dotfiles"
  local repos="$p6_org/p6df-core $p6_org/p6ctl $home"
  local repo
  for repo in $(echo "$repos"); do
    gh repo clone "$repo" "$root/$repo"
  done

  # Connect
  (
    cd ~

    # connect p6dfz to zsh init files
    rm -f .zlogin .zlogout .zprofile .zshrc .zshenv
    ln -fs "$gh_dir/$p6_org"/p6df-core/conf/zshenv-xdg .zshenv
    ln -fs "$gh_dir/$p6_org"/p6df-core/conf/zshrc .zshrc

    # connect "my" config
    ln -fs "$gh_dir/$home"/.zsh-me .
  )

  # Reload
  echo "reloading...."
  echo exec "$SHELL" -li
}

######################################################################
#<
#
# Function: p6_cmd_build([dockerfile=Dockerfile])
#
#  Args:
#	OPTIONAL dockerfile - [Dockerfile]
#
#  Depends:	 p6_cmd p6_diagnostics
#>
######################################################################
p6_cmd_build() {
  local dockerfile="${1:-Dockerfile}"

  docker --debug -l debug build --no-cache --progress plain -f "$dockerfile" .
}

######################################################################
#<
#
# Function: p6_cmd_docker_build()
#
#  Depends:	 p6_diagnostics p6_main
#  Environment:	 TERM
#>
######################################################################
p6_cmd_docker_build() {

  apk --no-cache add ncurses bash

  TERM=xterm-256color
  export TERM
}

######################################################################
#<
#
# Function: p6_cmd_docker_test()
#
#>
######################################################################
p6_cmd_docker_test() {

  . lib/_bootstrap.sh
  p6_bootstrap "." "github"

  p6_cicd_tests_run
}

######################################################################
#<
#
# Function: p6_diagnostics()
#
#  Depends:	 p6_main p6_msg
#  Environment:	 GIT
#>
#/ Synopsis
#/    Add this to a Jenkins Job to see stuff
#/    or kubectl exec -it --rm foo -- /bin/bash into and look around
#/
######################################################################
p6_diagnostics() {

  p6_msg "p6_diagnostics()"

  env | sort | grep -E '^GIT|^JENKINS|^DOCKER|PATH'
  pwd
  uname -a
  df -h
  uptime
  find . | grep -v .git/

  p6_msg_success "p6_diagnostics()"
}

######################################################################
#<
#
# Function: p6_msg()
#
#  Depends:	 p6_main p6_msg
#>
######################################################################
p6_msg() {
  echo "=============> $*"
}

######################################################################
#<
#
# Function: p6_msg_success()
#
#  Depends:	 p6_msg
#>
#/ Synopsis
#/  Outputs [CHECK] followed by message
#/
######################################################################
p6_msg_success() {

  echo "✅: $*"
}

######################################################################
#<
#
# Function: p6_msg_fail()
#
#>
#/ Synopsis
#/  Outputs [FAIL] followed by message
#/
######################################################################
p6_msg_fail() {

  echo "❌: $*"
}

p6main "$@"
